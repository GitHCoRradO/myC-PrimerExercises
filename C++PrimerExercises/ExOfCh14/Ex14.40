class comp_length {
public:
	bool operator()(const string &a, const string &b) const { return a.size() < b.size(); }
};
class lengthgreater {
private:
	size_t t;
public:
	lengthgreater(size_t n) : t(n) { }
	bool operator()(const string &s) const { return s.size() >= t; }
};
class printtocout {
public:
	void operator()(const string &s) const { cout << s << " "; }
};
void biggies(vector<string> &words, vector<string>::size_type sz) {
	elimDups(words);
	comp_length comp_leng;
	stable_sort(words.begin(), words.end(), comp_leng);
	lengthgreater leng_gr(sz);
	auto wc = find_if(words.begin(), words.end(), leng_gr);
	auto count = words.end() - wc;
	cout << count << " " << make_plural(count, "word", "s") << " of length " << sz << " or longer." << endl;
	printtocout ptc;
	for_each(wc, words.end(), ptc);
	cout << endl;
}
